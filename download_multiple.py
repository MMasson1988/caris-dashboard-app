# -*- coding: utf-8 -*-
"""
Script pour t√©l√©charger tous les exports CommCare avec pauses entre t√©l√©chargements
"""

import os
import time
import logging
from datetime import datetime
from function import (
    setup_driver, commcare_login, trigger_and_download, 
    check_file_exists_today, verify_download_success,
    list_files, DOWNLOAD_DIR, EXPORTS, ENV_FILE
)
from dotenv import load_dotenv

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%H:%M:%S",
)


def download_all_exports():
    """
    T√©l√©charge tous les exports CommCare avec pauses et v√©rifications
    """
    load_dotenv(ENV_FILE)
    email = os.getenv("EMAIL")
    password = os.getenv("PASSWORD") or os.getenv("PASSWORD_CC")

    if not email or not password:
        raise RuntimeError(f"EMAIL / PASSWORD introuvables dans {ENV_FILE}")

    logging.info(f"üîê Authentification avec: {email}")
    logging.info(f"üìÅ R√©pertoire de t√©l√©chargement: {DOWNLOAD_DIR}")

    driver = setup_driver(DOWNLOAD_DIR)

    try:
        # Login avec le premier export
        first_export = EXPORTS[0]
        logging.info("üîë Tentative de connexion...")
        commcare_login(driver, email, password, first_export["url"])
        
        # Variables pour le suivi des t√©l√©chargements
        results = []
        failed = []
        
        logging.info(f"üì• T√âL√âCHARGEMENT MULTIPLE - {len(EXPORTS)} fichiers √† traiter")
        logging.info("=" * 60)
        
        # Traiter chaque export
        for i, export in enumerate(EXPORTS, 1):
            name = export["name"]
            url = export["url"]
            
            # V√©rifier si le fichier existe d√©j√†
            exists, existing_path, reason = check_file_exists_today(export, DOWNLOAD_DIR)
            
            if exists:
                logging.info(f"[{i}/{len(EXPORTS)}] ‚è≠Ô∏è {name}")
                logging.info(f"  ‚úÖ Fichier d√©j√† pr√©sent: {reason}")
                results.append((name, existing_path))
                continue
            
            logging.info(f"[{i}/{len(EXPORTS)}] üì• {name}")
            logging.info(f"  üåê {url}")
            
            # Pause entre les t√©l√©chargements (sauf pour le premier)
            if i > 1:
                logging.info("  ‚è≥ Pause de 8 secondes avant t√©l√©chargement...")
                time.sleep(8)
            
            # √âtat avant t√©l√©chargement
            before_files = list_files(DOWNLOAD_DIR)
            
            try:
                # T√©l√©chargement
                path = trigger_and_download(driver, url)
                
                # V√©rification du succ√®s
                if path and os.path.isfile(path):
                    success, message = verify_download_success(export, DOWNLOAD_DIR, path)
                    
                    if success:
                        logging.info(f"  ‚úÖ T√©l√©chargement r√©ussi: {message}")
                        results.append((name, path))
                    else:
                        logging.error(f"  ‚ùå V√©rification √©chou√©e: {message}")
                        failed.append((name, f"V√©rification √©chou√©e: {message}"))
                else:
                    error_msg = f"Aucun fichier valide retourn√© (path={path})"
                    logging.error(f"  ‚ùå {error_msg}")
                    failed.append((name, error_msg))
                    
            except Exception as download_error:
                error_msg = str(download_error)
                logging.error(f"  ‚ùå Erreur lors du t√©l√©chargement: {error_msg}")
                failed.append((name, error_msg))
                
                # Pause plus longue en cas d'erreur
                if i < len(EXPORTS):
                    logging.info("  ‚è≥ Pause de 15 secondes apr√®s erreur...")
                    time.sleep(15)
            
            # √âtat apr√®s t√©l√©chargement
            after_files = list_files(DOWNLOAD_DIR)
            new_files = after_files - before_files
            
            if new_files:
                logging.info(f"  üìÑ Nouveaux fichiers: {list(new_files)}")
            
            # Petite pause m√™me en cas de succ√®s
            if i < len(EXPORTS):
                time.sleep(3)
        
        # RAPPORT FINAL
        logging.info("=" * 60)
        logging.info("üìä RAPPORT DE T√âL√âCHARGEMENT MULTIPLE")
        logging.info("=" * 60)
        
        if results:
            logging.info(f"‚úÖ SUCC√àS ({len(results)}):")
            for name, path in results:
                file_size = os.path.getsize(path) if os.path.exists(path) else 0
                logging.info(f"   ‚Ä¢ {name}")
                logging.info(f"     üìÑ {os.path.basename(path)} ({file_size:,} bytes)")
        
        if failed:
            logging.info(f"\n‚ùå √âCHECS ({len(failed)}):")
            for name, error in failed:
                logging.info(f"   ‚Ä¢ {name}")
                logging.info(f"     üí• {error}")
        
        # Statistiques finales
        total_files = len(EXPORTS)
        success_count = len(results)
        failure_count = len(failed)
        success_rate = (success_count / total_files) * 100 if total_files > 0 else 0
        
        logging.info(f"\nüìà STATISTIQUES:")
        logging.info(f"   Total: {total_files} fichiers")
        logging.info(f"   Succ√®s: {success_count}")
        logging.info(f"   √âchecs: {failure_count}")
        logging.info(f"   Taux de r√©ussite: {success_rate:.1f}%")
        
        if success_rate >= 90:
            logging.info("üéâ T√âL√âCHARGEMENT EXCELLENT!")
        elif success_rate >= 75:
            logging.info("üëç T√âL√âCHARGEMENT SATISFAISANT")
        else:
            logging.warning("‚ö†Ô∏è T√âL√âCHARGEMENT AVEC PROBL√àMES")
        
        return success_rate >= 75

    except Exception as main_error:
        logging.error(f"‚ùå Erreur principale: {main_error}")
        raise
    finally:
        logging.info("üîí Fermeture du navigateur...")
        time.sleep(5)
        driver.quit()


if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DU T√âL√âCHARGEMENT MULTIPLE")
    print("=" * 50)
    print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÇ R√©pertoire: {DOWNLOAD_DIR}")
    print(f"üì¶ Nombre d'exports: {len(EXPORTS)}")
    print()
    
    try:
        success = download_all_exports()
        
        if success:
            print("\nüéâ T√âL√âCHARGEMENT MULTIPLE TERMIN√â AVEC SUCC√àS!")
        else:
            print("\n‚ö†Ô∏è T√©l√©chargement termin√© avec quelques probl√®mes")
            
    except Exception as e:
        print(f"\n‚ùå ERREUR FATALE: {e}")
        import traceback
        traceback.print_exc()
